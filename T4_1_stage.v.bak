`include	"conf.v"
module T4_1_stage(
	/*输入*/
	input										clk,
	input										rstn,
	input			[2:0]						cont_T3_2,
	input			[73:0]					sh_reg,
	input			[47:0]					Sum,
	input			[47:0]					Carry,
	input										S_A_T3_2,
	input										S_B_T3_2,
	input										S_C_T3_2,
	input										S_A_H_T3_2,
	input										S_B_H_T3_2,
	input									S_C_H_T3_2,
	input			[11:0]					E_T3_2,
	input			[3:0]						trap_T3_2_0,
	input			[3:0]						trap_T3_2_1,
	input			[2:0]						trap_ans_T3_2_0,
	input			[2:0]						trap_ans_T3_2_1,
	input			[11 : 0]					d_T3_2,
	/*输出*/
	/*leadingZeroAnticipate*/
	output		[9:0]						sh_num,
	output		[1:0]						esh,
	/*control*/
	output	reg[11:0]					E_T4_1,
	output	reg							S_A_T4_1,
	output	reg							S_B_T4_1,
	output	reg							S_C_T4_1,
	output	reg							S_A_H_T4_1,
	output	reg							S_B_H_T4_1,
	output	reg							S_C_H_T4_1,
	output	reg							s2_T4_1,//最终符号位低位
	output	reg							s2h_T4_1,//高位
	output	reg[3:0]						trap_T4_1_0,
	output	reg[3:0]						trap_T4_1_1,
	output	reg[2:0]						trap_ans_T4_1_0,
	output	reg[2:0]						trap_ans_T4_1_1,
	output	reg[2:0]						cont_T4_1,
	output		[1:0]						revising_T4_1,
	output	reg[11:0]					d_T4_1
);
	wire			[1:0]						d_s;
	wire			[25:0]					sh_left;
	wire			[47:0]					sh_right;
	wire										signal;
	wire										signal_h;
	wire			[48:0]					Carryp;
	wire			[47:0]					Sump;
	wire			[1:0]						revising;
	wire			[9:0]						P;
	wire			[1:0]						V;
	wire										cin;
	wire			[74:0]					p_reg_temp;
	wire			[47:0]					sum_cal;
	wire										s;
	wire										s_h;
	wire			[73:0]					p_reg_lin;
	assign		sh_left			=			(cont_T3 == 3'b0 || cont_T3 == 3'b010) ? sh_reg[73:48] : (cont_T3 == 3'b001) ? {sh_reg[69:57],sh_reg[34:22]} : 26'b0;
	assign		sh_right			=			(cont_T3 == 3'b0) ? sh_reg[47:0] : (cont_T3 == 3'b001) ? {3'b0,sh_reg[56:35],1'b0,sh_reg[21:0]} 
														: (cont_T3 == 3'b010) ? {3'b0,22'b0,1'b0,sh_reg[47:26]} : {1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,40'b0};  
	assign		signal			=			(!S_A_T3 && !S_B_T3 && S_C_T3) || (!S_A_T3 && S_B_T3 && !S_C_T3) || (S_A_T3 && S_B_T3 && S_C_T3) || (S_A_T3 && !S_B_T3 && !S_C_T3);
	assign		signal_h			=			(!S_A_H_T3 && !S_B_H_T3 && S_C_H_T3) || (!S_A_H_T3 && S_B_H_T3 && !S_C_H_T3) || (S_A_H_T3 && S_B_H_T3 && S_C_H_T3) || (S_A_H_T3 && !S_B_H_T3 && !S_C_H_T3);
	assign		d_s[1:0]         =        d_T3[1:0];
	T4_CSA_file t4_csa(
		.in1										(Sum),
		.in2										(Carry),
		.in3										(sh_right),
		.signal									(signal),
		.signal_h								(signal_h),
		.cont										(cont_T3_2),
		.Carry									(Carryp),
		.Sum										(Sump)
	);
	LeadingZeroAnt leadingzeroant(
		.cont									(cont_T3_2), 
		.M_C_A								(sh_left),
		.Carry								(Carryp),
		.Sum									(Sump),
		.S_A									(S_A_T3_2),
		.S_B									(S_B_T3_2),
		.S_C									(S_C_T3_2),
		.S_A_H								(S_A_H_T3_2),
		.S_B_H								(S_B_H_T3_2),
		.S_C_H								(S_C_H_T3_2),
		.d										(d_s),
		.revising							(revising),
		.P										(P),
		.V										(V)
	);
	T4_1_reg t4_1_reg(
		.clk									(clk),
		.rstn									(rstn),
		.cont									(cont_T3_2),
		.P										(P),
		.V										(V),
		.sh_num								(sh_num),
		.esh									(esh),
		.revising							(revising),
		.revi									(revising_T4_1)				
	);
	/*传递控制信号*/
	always@(posedge clk or negedge rstn)begin
		if(!rstn)begin
			trap_T4_0 		<=			#`PERIOD 4'b0000;
			trap_T4_1 		<=			#`PERIOD	4'b0000;
			trap_ans_T4_0	<=		   #`PERIOD 3'b000;
			trap_ans_T4_1  <=			#`PERIOD 3'b000;
			S_A_H_T4			<=			#`PERIOD	'b0;
			S_B_H_T4			<=			#`PERIOD	'b0;
			S_C_H_T4			<=			#`PERIOD 'b0;
			S_A_T4			<=			#`PERIOD	'b0;
			S_B_T4			<=			#`PERIOD	'b0;
			S_C_T4			<=			#`PERIOD	'b0;
			cont_T4			<=			#`PERIOD	3'b0;
			s2_T4				<=			#`PERIOD 'b0;
			s2h_T4			<=		   #`PERIOD 'b0;
			d_T4				<=			#`PERIOD 12'b0;
			E_T4				<=			#`PERIOD 12'b0;
		end else begin
			trap_T4_0		<=			#`PERIOD trap_T3_0;
			trap_T4_1		<=			#`PERIOD	trap_T3_1;
			trap_ans_T4_0	<=			#`PERIOD	trap_ans_T3_0;
			trap_ans_T4_1	<=			#`PERIOD	trap_ans_T3_1;
			S_A_H_T4			<=			#`PERIOD	S_A_H_T3;
			S_B_H_T4			<=			#`PERIOD S_B_H_T3;
			S_C_H_T4			<=			#`PERIOD	S_C_H_T3;
			S_A_T4			<=			#`PERIOD	S_A_T3;
			S_B_T4			<=			#`PERIOD	S_B_T3;
			S_C_T4			<=			#`PERIOD	S_C_T3;
			cont_T4			<=			#`PERIOD cont_T3;
			s2_T4             <=       #`PERIOD s;
			s2h_T4         <=       #`PERIOD s_h;
			d_T4				<=			#`PERIOD d_T3;
			//计算结果的阶码
			if(cont_T3 == 3'd0)begin
				if(d_T3[0] != 1'b0)begin
					if(V[0] == 1'b0)begin
						E_T4	<=			#`PERIOD	E_T3 + 12'b00_0011 - {1'b0,revising[0]};
					end else begin
						E_T4	<=			#`PERIOD	E_T3 + 12'b00_0011 - {1'b0,P[5:0]} - {1'b0,revising[0]}; 
					end
				end else begin
					if(V[0] == 'b0)begin
						E_T4	<=			#`PERIOD	E_T3;
					end else begin
						E_T4	<= 		#`PERIOD E_T3 - {1'b0,P[5:0]} - {1'b0,revising[0]} + 12'b011011;
					end
				end
			end else if(cont_T3 == 3'd1)begin
				if(d_T3[1] != 1'b0) begin
					if(V[1] == 'b0)begin
						E_T4[11:6]	<= #`PERIOD E_T3[11:6] + 6'b0011 - {1'b0,revising[1]};
					end else begin
						E_T4[11:6] 	<= #`PERIOD E_T3[11:6] + 6'd3 - {1'b0,P[9:5]} - {1'b0,revising[1]};
					end
				end else begin
					if(V[1] == 'b0)begin
						E_T4[11:6]	<=	#`PERIOD	E_T3[11:6] + 6'b00_1110 - {1'b0,revising[1]};
					end else begin
						E_T4[11:6] 	<= #`PERIOD E_T3[11:6] - {1'b0,P[9:5]} - {1'b0,revising[1]} + 6'b0_1110;
					end
				end
				if(d_T3[0] != 1'b0)begin
					if(V[0] == 1'b0)begin
						E_T4[5:0]  	<= #`PERIOD	E_T3[5:0] + 6'b00_0011 - {1'b0,revising[0]};
					end else begin
						E_T4[5:0] 	<=	#`PERIOD E_T3[5:0] + 6'b0_0011 - {1'b0,P[4:0]} - {1'b0,revising[0]};
					end
				end else begin
					if(V[0] == 1'b0)begin
						E_T4[5:0]	<=	#`PERIOD E_T3[5:0] + 6'b00_1110 - {1'b0,revising[0]};
					end else begin
						E_T4[5:0]   <= #`PERIOD E_T3[5:0] + 5'b00_1110 - {1'b0,P[4:0]} - {1'b0,revising[0]};
					end
				end
			end else if(cont_T3 == 3'b010)begin
					E_T4			<=	#`PERIOD	E_T3 + 6'b01_1011 - {1'b0,P[5:0]} - {1'b0,revising[0]};
			end else begin
					E_T4			<=	#`PERIOD	12'b0;
			end
		end
	end 
endmodule
